// Code generated by protoc-gen-go-grpc-prc. DO NOT EDIT.

package park

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParkClient is the client API for Park service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkClient interface {
	GetPark(ctx context.Context, in *GetParkRequest, opts ...grpc.CallOption) (*GetParkResponse, error)
}

type parkClient struct {
	cc grpc.ClientConnInterface
}

func NewParkClient(cc grpc.ClientConnInterface) ParkClient {
	return &parkClient{cc}
}

func (c *parkClient) GetPark(ctx context.Context, in *GetParkRequest, opts ...grpc.CallOption) (*GetParkResponse, error) {
	out := new(GetParkResponse)
	err := c.cc.Invoke(ctx, "/v1.park.Park/GetPark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkServer is the server API for Park service.
// All implementations must embed UnimplementedParkServer
// for forward compatibility
type ParkServer interface {
	GetPark(context.Context, *GetParkRequest) (*GetParkResponse, error)
	mustEmbedUnimplementedParkServer()
}

// UnimplementedParkServer must be embedded to have forward compatible implementations.
type UnimplementedParkServer struct {
}

func (UnimplementedParkServer) GetPark(context.Context, *GetParkRequest) (*GetParkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPark not implemented")
}
func (UnimplementedParkServer) mustEmbedUnimplementedParkServer() {}

// UnsafeParkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkServer will
// result in compilation errors.
type UnsafeParkServer interface {
	mustEmbedUnimplementedParkServer()
}

func RegisterParkServer(s grpc.ServiceRegistrar, srv ParkServer) {
	s.RegisterService(&Park_ServiceDesc, srv)
}

func _Park_GetPark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkServer).GetPark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.park.Park/GetPark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkServer).GetPark(ctx, req.(*GetParkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Park_ServiceDesc is the grpc.ServiceDesc for Park service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Park_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.park.Park",
	HandlerType: (*ParkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPark",
			Handler:    _Park_GetPark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/v1/park/park.proto",
}
